version: '3.8'

services:
  # Base de donn√©es PostgreSQL pour la production
  postgres:
    image: postgres:15-alpine
    container_name: orion-postgres
    environment:
      POSTGRES_DB: orion_ad_guardian
      POSTGRES_USER: orion_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-orion_secure_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - orion-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.backend
    container_name: orion-backend
    environment:
      - PRODUCTION_MODE=true
      - DATABASE_URL=postgresql://orion_user:${POSTGRES_PASSWORD:-orion_secure_password_2024}@postgres:5432/orion_ad_guardian
      - API_KEY=${API_KEY:-orion-production-secret-key-2024-change-me}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3180,https://your-domain.com}
      - MAX_ALERTS=${MAX_ALERTS:-10000}
      - ALERT_RETENTION_DAYS=${ALERT_RETENTION_DAYS:-90}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8006:8006"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - orion-network
    volumes:
      - ./logs:/app/logs

  # Interface web
  frontend:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.frontend
    container_name: orion-frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8006}
      - REACT_APP_API_KEY=${API_KEY:-orion-production-secret-key-2024-change-me}
    ports:
      - "3180:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - orion-network

  # Agent AD (optionnel pour la production)
  ad-agent:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.agent
    container_name: orion-ad-agent
    environment:
      - ORCHESTRATOR_URL=http://backend:8006
      - API_KEY=${API_KEY:-orion-production-secret-key-2024-change-me}
      - EVENT_INTERVAL=${EVENT_INTERVAL:-10}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - orion-network

  # Nginx reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: orion-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - orion-network

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: orion-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - orion-network

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: orion-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - orion-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  orion-network:
    driver: bridge 